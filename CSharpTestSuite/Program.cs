// See https://aka.ms/new-console-template for more information
using CSharpTestSuite.Lessons;

/*
 * 📚 C#-ում namespace-ները և using դիրեկտիվը թույլ են տալիս ծրագրին կազմակերպել և միացնել ֆայլերը, դասերը և մեթոդները՝
 * տարբեր մասերից։ Դրանք ապահովում են կոդի ավելի լավ կազմակերպում 📂 և վերահսկում 🧭, թե որտեղից կարող են գտնվել և
 * կանչվել տարբեր դասերը (classes)։

 * 🔧 Using դիրեկտիվը

   ➡️ `using` դիրեկտիվը թույլ է տալիս ծրագրին հասանելի դարձնել այլ namespaces-ի մեջ գտնվող դասերը և մեթոդները:
   ⚠️ **Դիրեկտիվը** C#-ում հրահանգ է, որն ասում է կոմպիլյատորին կամ runtime-ին, թե ինչպես պետք է վարվել կոդի որոշակի հատվածների հետ։

 * 🏷️ Namespace-ի դերը

   Namespace-ները օգտագործվում են կոդը խմբավորելու 📦 և դրա անունները կառավարվող դարձնելու համար։ Այն թույլ է տալիս
   ծրագրավորողներին 🧑‍💻 նույն անունը կիրառել տարբեր ֆայլերում, առանց անունների կոնֆլիկտների 🚫։ Օրինակ՝ եթե դուք երկու դաս ունեք,
   որոնք նույն անունն ունեն, կարող եք դրանք պահել տարբեր namespaces-ում՝ կոդի կազմակերպումը հեշտացնելու համար։
 */


/*
 * 📂 Ֆայլերի կապը namespace-ներով և using-ով
   C#-ում, ինչպես JavaScript-ում օգտագործում են `import/export` կամ `CommonJS` մեխանիզմները, C#-ում ֆայլերի միջև կապը և
   դրանց օգտագործումը տեղի է ունենում `namespace`-ների և `using` դիրեկտիվի միջոցով։
 *
 */


/*
 * 🛠️ Կոմպիլյացիայի գործընթացը C#-ում
 * JavaScript-ում դուք հաճախ օգտագործում եք Webpack 🛠️, Parcel 📦, կամ այլ կոմպիլյատորներ ֆայլերը հավաքելու և մեկ հավաքածու
 * (bundle) ստեղծելու համար։ C#-ում, կոմպիլյացիան իրականացվում է C# compiler-ի (C# կոմպիլյատորի) միջոցով, որը հավաքում
 * է բոլոր `.cs` ֆայլերը 📂 և ստեղծում executable (կատարվող) ծրագիր կամ DLL (գրադարան) 🗂️։
 *
 * 📦 Ֆայլերի կոմպիլյացիան C#-ում
   C#-ի կոմպիլյատորը հետևում է բոլոր `.cs` ֆայլերին, որոնք ընդգրկված են նախագծի մեջ, և կոմպիլացնում է դրանք մեկ կատարվող
    (executable) կամ գրադարանի (DLL) ֆայլի մեջ։ Սա համարժեք է Webpack-ի միջոցով bundle ստեղծելուն JavaScript-ում։

    📝 Օրինակ՝ ինչպես կոմպիլացնել C# նախագիծ:
   Դուք կարող եք օգտագործել `dotnet CLI`՝ ծրագիրը կոմպիլացնելու համար:

   ```bash
   dotnet build   # Կոմպիլացնում է նախագիծը 🛠️
   dotnet run     # Կատարում է ծրագիրը 🚀
   ```
*/

class Program
{
    static void Main(string[] args)
    {
        var lesson = new Lesson1();
        lesson.RunLesson();
    }
}
